#!/usr/bin/env bash
# shellcheck disable=SC2199
# shellcheck source=/dev/null
#
# Copyright (C) 2020-21 UtsavBalar1231 <utsavbalar1231@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cd /drone/src/

# Export Cross Compiler name
if [[ "$@" =~ "benzoclang"* ]]; then
	export COMPILER="BenzoClang-12.0"
elif [[ "$@" =~ "proton"* ]]; then
	if [[ "$@" =~ "lto"* ]]; then
		export COMPILER="Proton clang 13.0 LTO"
	else
		export COMPILER="Proton clang 13.0"
	fi
fi

# Export Build username
export KBUILD_BUILD_USER="UtsavTheCunt"
export KBUILD_BUILD_HOST="CuntsSpace"

# Enviromental Variables
AUTHOR=`git log $BRANCH -1 --format="%an"`
BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
COMMIT=`git log $BRANCH -1 --format="%h / %s"`
DATE=$(date +"%d.%m.%y")
DEVICE="Redmi K20 Pro | Mi9T Pro"
HOME="/drone/src/"
KERNEL_LINK=https://github.com/UtsavBalar1231/kernel_xiaomi_raphael
MESSAGE="$AUTHOR@$REF: $KERNEL_LINK/commit/$COMMIT"
OUT_DIR=out/
REF=`echo "$BRANCH" | grep -Eo "[^ /]+\$"`
if [[ "$@" =~ "lto"* ]]; then
	VERSION="IMMENSITY-RAPHAEL-${TYPE}-LTO-${DRONE_BUILD_NUMBER}-${DATE}"
else
	VERSION="IMMENSITY-RAPHAEL-${TYPE}-${DRONE_BUILD_NUMBER}-${DATE}"
fi
# Export Zip name
export ZIPNAME="${VERSION}.zip"

# How much kebabs we need? Kanged from @raphielscape :)
if [[ -z "${KEBABS}" ]]; then
	COUNT="$(grep -c '^processor' /proc/cpuinfo)"
	export KEBABS="$((COUNT * 2))"
fi

# Post to CI channel
curl -s -X POST https://api.telegram.org/bot${BOT_API_KEY}/sendPhoto -d photo=https://github.com/UtsavBalar1231/xda-stuff/raw/master/banner.png -d chat_id=${CI_CHANNEL_ID}
curl -s -X POST https://api.telegram.org/bot${BOT_API_KEY}/sendMessage -d text="<code>IMMENSITY</code>
Build Type: <code>${TYPE}</code>
Device: <code>${DEVICE}</code>
Compiler: <code>${COMPILER}</code>
Branch: <code>$(git rev-parse --abbrev-ref HEAD)</code>
Commit: $MESSAGE
<i>Build started on Drone Cloud...</i>
Check the build status here: https://cloud.drone.io/UtsavBalar1231/kernel_xiaomi_raphael/${DRONE_BUILD_NUMBER}" -d chat_id=${CI_CHANNEL_ID} -d parse_mode=HTML
curl -s -X POST https://api.telegram.org/bot${BOT_API_KEY}/sendMessage -d text="Build started for revision ${DRONE_BUILD_NUMBER}" -d chat_id=${CI_CHANNEL_ID} -d parse_mode=HTML

START=$(date +"%s")
# Benzoclang
if [[ "$@" =~ "benzoclang"* ]]; then
	# Make defconfig
	make ARCH=arm64 \
		O=${OUT_DIR} \
		raphael_defconfig \
		-j${KEBABS}
	# Enable LLD
	scripts/config --file ${OUT_DIR}/.config \
		-d LTO \
		-d LTO_CLANG \
		-e SHADOW_CALL_STACK \
		-e POLLY_CLANG \
		-e TOOLS_SUPPORT_RELR \
		-e LD_LLD
	# Make olddefconfig
	cd ${OUT_DIR}
	make O=${OUT_DIR} \
		ARCH=arm64 \
		olddefconfig \
		-j${KEBABS}
	cd ../
	# Set compiler Path
	PATH=${HOME}/clang/bin/:${HOME}/arm64-gcc/bin/:${HOME}/arm32-gcc/bin/:$PATH
	make ARCH=arm64 \
		O=${OUT_DIR} \
		CC="clang" \
		LD="ld.lld" \
		AR="llvm-ar" \
		NM="llvm-nm" \
		HOSTCC="clang" \
		HOSTLD="ld.lld" \
		HOSTCXX="clang++" \
		STRIP="llvm-strip" \
		OBJCOPY="llvm-objcopy" \
		OBJDUMP="llvm-objdump" \
		READELF="llvm-readelf" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		CROSS_COMPILE="aarch64-linux-android-" \
		CROSS_COMPILE_ARM32="arm-linux-androideabi-" \
		-j${KEBABS}
elif [[ "$@" =~ "proton"* ]]; then
	# Make defconfig
	make ARCH=arm64 \
		O=${OUT_DIR} \
		raphael_defconfig \
		-j${KEBABS}
	if [[ "$@" =~ "lto"* ]]; then
		# Enable LTO
		scripts/config --file ${OUT_DIR}/.config \
			-e LTO \
			-e LTO_CLANG \
			-d THINLTO \
			-e SHADOW_CALL_STACK \
			-e POLLY_CLANG \
			-e TOOLS_SUPPORT_RELR \
			-e LD_LLD
	else
		# Enable LLD
		scripts/config --file ${OUT_DIR}/.config \
			-d LTO \
			-d LTO_CLANG \
			-e SHADOW_CALL_STACK \
			-e POLLY_CLANG \
			-e TOOLS_SUPPORT_RELR \
			-e LD_LLD
	fi

	# Make olddefconfig
	cd ${OUT_DIR}
	make O=${OUT_DIR} \
		ARCH=arm64 \
		olddefconfig \
		-j${KEBABS}
	cd ../
	# Set compiler Path
	PATH=${HOME}/clang/bin/:$PATH
	make ARCH=arm64 \
		O=${OUT_DIR} \
		CC="clang" \
		LD="ld.lld" \
		AR="llvm-ar" \
		NM="llvm-nm" \
		HOSTCC="clang" \
		HOSTLD="ld.lld" \
		HOSTCXX="clang++" \
		STRIP="llvm-strip" \
		OBJCOPY="llvm-objcopy" \
		OBJDUMP="llvm-objdump" \
		READELF="llvm-readelf" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		CROSS_COMPILE="aarch64-linux-gnu-" \
		CROSS_COMPILE_ARM32="arm-linux-gnueabi-" \
		-j${KEBABS}
else
	# Make defconfig
	make ARCH=arm64 \
		O=${OUT_DIR} \
		raphael_defconfig \
		-j${KEBABS}
	# Enable LLD
	scripts/config --file ${OUT_DIR}/.config \
		-d LTO \
		-d LTO_CLANG \
		-e SHADOW_CALL_STACK \
		-e POLLY_CLANG \
		-e TOOLS_SUPPORT_RELR \
		-e LD_LLD
	# Make olddefconfig
	cd ${OUT_DIR}
	make O=${OUT_DIR} \
		ARCH=arm64 \
		olddefconfig \
		-j${KEBABS}
	cd ../
	# Set compiler Path
	PATH=${HOME}/clang/bin/:$PATH
	make ARCH=arm64 \
		O=${OUT_DIR} \
		CC="clang" \
		LD="ld.lld" \
		AR="llvm-ar" \
		NM="llvm-nm" \
		HOSTCC="clang" \
		HOSTLD="ld.lld" \
		HOSTCXX="clang++" \
		STRIP="llvm-strip" \
		OBJCOPY="llvm-objcopy" \
		OBJDUMP="llvm-objdump" \
		READELF="llvm-readelf" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		CROSS_COMPILE="aarch64-linux-gnu-" \
		CROSS_COMPILE_ARM32="arm-linux-gnueabi-" \
		-j${KEBABS}
fi

END=$(date +"%s")
DIFF=$(( END - START))

# Import Anykernel3 folder
cp $(pwd)/${OUT_DIR}/arch/arm64/boot/Image.gz-dtb $(pwd)/anykernel/
cp $(pwd)/${OUT_DIR}/arch/arm64/boot/dtbo.img $(pwd)/anykernel/

cd anykernel
zip -r9 ${ZIPNAME} * -x .git .gitignore *.zip
CHECKER=$(ls -l ${ZIPNAME} | awk '{print $5}')
if (($((CHECKER / 1048576)) > 5)); then
	curl -s -X POST https://api.telegram.org/bot${BOT_API_KEY}/sendMessage -d text="âœ…Kernel compiled successfully in $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds for ${DEVICE}" -d chat_id=${CI_CHANNEL_ID} -d parse_mode=HTML
	curl -F chat_id="${CI_CHANNEL_ID}" -F document=@"$(pwd)/${ZIPNAME}" https://api.telegram.org/bot${BOT_API_KEY}/sendDocument
else
	curl -s -X POST https://api.telegram.org/bot${BOT_API_KEY}/sendMessage -d text="Error in build!!" -d chat_id=${CI_CHANNEL_ID}
	exit 1;
fi
cd $(pwd)

# Cleanup
rm -fr anykernel/
